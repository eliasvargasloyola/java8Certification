Java 1.8
Java SE 8 Programmer I 1Z0-808

https://www.exam-labs.com/info/1z0-808
https://www.certification-questions.com/java-exam/1z0-808-dumps.html
https://www.myexamcloud.com/onlineexam/viewExam.html?t=Uc1TNwrGb08=#

* Encapsular comportamiento de codigos en clases y definir interfaces para representar la funcion.

# Funciones en Java.
 - Es como un metodo estatico. 
 - Lambdas Expresion o funciones anonimas
 - Predicate types

 Syntax "::" es, use este metodo como un valor.

# Streams en Java (MultiThread)

- Procesamiento secuencial
- Procesamiento paralelo

# Metodo Default en interfaces

# Lambdas Expression

- Usar lambda como parametro de entrada para una interfaz.
- Interfaces Funcionales, son las que definen solo 1 metodo.
- Cuando es una interfaz funcional, la implementación de esta se puede hacer a traves de Lambda.
- Anotacion @FunctionalInterface
- Para evaluar booleanos, usar interface "Predicate"
- Para tratamiento de objetos sin retorno (void), usar interface "Consumer"
- Para recibir un objeto y devolver otro, usar interface "Function"
- Para no recibir parametros y devolver un valor, usar interface "Supplier"
- Para recibir 2 objetos y retornar otro, usar interface "BiFunction"
- Para recibir 2 objetos sin retorno (void), usar interface "ToIntBiFunction"
- Revisar las interfaces de Function package

# Referncias de metodos

- Cuando una expresion lambda llama directamente a un metodo, se puede reemplzar con una referencia de metodo "Class::Method"
- Tambien se puede usar la referncia a un contructor "Class:new"

# Stream API

- Filtrar, ordenar, agrupar listas con un metodo simple.
- Es como hacer querys en base de datos.
- Permite uso de hilos paralelamente de manera interna, para mejorar perfomance.
- Operaciones
    -> Intermediarias - Retornan un stream
    - Filter, filtrar por un Predicate
    - Map, obtener un valor especifico
    - Limit, limitar retorno
    - Sorted, ordena el stream
    - Distinct, elimina los duplicados en base al metodo "equals" del objeto
    - Skip, elimina los primeros "n"
    - Mapping, extrae una parte de la lista original, es como una nueva lista de lo que estaba contendio
    ** FlatMap, --> Buscar mas info
    -> Terminales - Retorna un objeto distinto a stream
    - Collect, agrupar resultado
    - Count, contar registros
    - ForEach, recorrer el stream
- Matchers (AnyMatch, AllMatch, NoneMatch)
- Finders (FindAny, FindFirst)
- Reduce --> Buscar mas info
- Stream Especiales para tipos de datos, al momento de mapear (mapToInt, mapToDouble, mapToLong), puedes usar los metodos de los tipos de datos en todo el stream.

# Optional

- Verificar un objeto antes de usarlo para reducir bugs de error.

- Metodos usados.

- isPresent() Retorna verdadero si el valor está presente.
- ifPresent(Consumer<T> block) Ejecuta el codigo pasado si el valor está presente
- T get() Retorna el objeto si está presente, sino da error
- T orElse(T other) Si el valor está presente lo devuelve, sino retorna el por defecto que es pasado en la firma.

# Collection

- Se puede agrupar por varios tipos.
- Maximo, minimo y sumar valores.
- Colectores predefinidos.
- Colectores pueden.
    - Reducir y sumar
    - Agrupar
    - Dividir
- Se pueden crear propios colectores.
- Se puede obtener todas las estadisticas basicas de una lista (minimo, maximo, promedio, suma, conteo) usando SummaryStatics
- Se puede unir elementos por un delimitador con "joining"

#Default Interface

- Pueden haber N metodos default
- Son metodos que tienen una implementación por defecto, por lo que no es obligacion sobre escribirlos
- La diferencia con las clases abstractas, es que una clase abstracta solo se puede heredar una y las interfaces se pueden implementar N.
- Se pueden dejar metodos por defecto con excepciones que ese metodo no es soportado.
- Separar metodos de una clase en N interfacess
- Las reglas de solucion
	1.- Los metodos de las clases siempre ganan por sobre el metodo por defecto.
	2.- Las sub interfaces ganan, si tienes varias interfaces con el mismo metodo por defecto, manda la que este dentro de otra.
	3.- Definir explicitamente cual metodo usar

#Completable Future

thenApply Una vez termina el hilo, transforme el valor (Es como un map)
thenAccept Una vez terminado el hilo, haga lo siguiente (Pero no retorna valor)
thenCompose Concatena otro hilo, al finalizar el actual. (Una vez termine este hilo, ejecutar este otro)
thenCombine Combina 2 hilos y el resultado de ambos, vuelve en una BiFunction.

Si usas los metodos variantes con el apendice "Async" es el mismo comportamiento, solo la operacion, la hace en un hilo aparte y no usa el mismo. Ojo, que si se usa esto, tiene que haber un hilo disponible para hacerlo, sino espera que haya uno.


CompletableFuture.allOf Cuando todos los hilos de esta lista, esten listos, haga lo siguiente.
CompletableFuture.anyOf Cuando uno de los hilos de esta lista, este  listo, haz lo siguiente.


N threads = N CPU * U CPU * (1 + W/C)
where
 N CPU is the number of cores, available through Runtime.getRuntime().availableProcessors()
 U CPU is the target CPU utilization (between 0 and 1), and
 W/C is the ratio of wait time to compute time

# LocalDateTime

1.- LocalDate para las fechas
2.- LocalTime para las horas
3.- LocalDateTime para fechas y horas.

- Duration, se usa para medir periodos de horas.
- Period, se usa para medir periodos de fechas.



